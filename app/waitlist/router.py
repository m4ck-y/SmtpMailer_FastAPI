from fastapi import APIRouter, HTTPException, status
from app.waitlist.controller import EmailWaitlistApplication
from app.waitlist.models import WaitlistEmailRequest, WaitlistEmailResponse

controller = EmailWaitlistApplication()

MODULE_NAME = "waitlist"

router_waitlist = APIRouter(
    prefix=f"/{MODULE_NAME}",
    tags=[MODULE_NAME])

TAG_WAITLIST = {
    "name": MODULE_NAME,
    "description": """
üìß **Confirmaci√≥n de Lista de Espera** - Notificaciones personalizadas por ofertas

### üéØ Funcionalidades Principales:
- **Confirmaci√≥n autom√°tica** - Email inmediato tras registro en waitlist
- **Personalizaci√≥n inteligente** - Mensaje adaptado seg√∫n ofertas de inter√©s
- **Dise√±o responsivo** - Compatible con todos los clientes de correo
- **L√≥gica condicional** - Diferentes mensajes seg√∫n cantidad de ofertas

### üìã Personalizaci√≥n por Ofertas:
- **Sin ofertas espec√≠ficas** - Mensaje gen√©rico de plataforma
- **Una oferta** - "En cuanto [Oferta] est√© disponible oficialmente..."
- **M√∫ltiples ofertas** - "En cuanto nuestras soluciones [Lista] est√©n disponibles..."
- **Validaci√≥n autom√°tica** - M√°ximo 10 ofertas, 100 caracteres cada una

### üöÄ Casos de Uso por Escenario:
- **Plataforma general:** `offerings: []` - Registro sin ofertas espec√≠ficas
- **Producto √∫nico:** `offerings: ["CRM Avanzado"]` - Una soluci√≥n particular
- **Suite completa:** `offerings: ["CRM", "Analytics", "Inventarios"]` - M√∫ltiples productos
- **Beta testing:** `offerings: ["Beta Program"]` - Programas de prueba

### ‚ö° Integraci√≥n Avanzada:
- **Array de ofertas** - Par√°metro principal para personalizaci√≥n
- **Respuesta detallada** - Incluye tipo de mensaje y texto generado
- **Configuraci√≥n autom√°tica** - Branding desde variables de entorno
- **Manejo robusto** - Validaci√≥n y errores SMTP cubiertos

### üîß Tipos de Respuesta:
- **message_type: "platform"** - Sin ofertas espec√≠ficas
- **message_type: "single"** - Una sola oferta
- **message_type: "multiple"** - M√∫ltiples ofertas
- **offerings_text** - Texto exacto generado para el email
"""
}

@router_waitlist.post("/send_confirmation", response_model=WaitlistEmailResponse)
def enviar_confirmacion_waitlist(request: WaitlistEmailRequest) -> WaitlistEmailResponse:
    """
    Env√≠a email de confirmaci√≥n de registro en lista de espera con personalizaci√≥n de ofertas.
    
    Notifica al usuario que su correo electr√≥nico ha sido registrado exitosamente
    en la lista de espera. El mensaje se personaliza autom√°ticamente seg√∫n las
    ofertas (productos/servicios) especificadas, utilizando l√≥gica condicional
    inteligente para diferentes escenarios.
    
    ### üéØ Personalizaci√≥n Inteligente por Ofertas:
    - **Sin ofertas (array vac√≠o):** "En cuanto nuestra plataforma est√© disponible..."
    - **Una oferta:** "En cuanto [Nombre de la Oferta] est√© disponible oficialmente..."
    - **M√∫ltiples ofertas:** "En cuanto nuestras soluciones [Oferta1, Oferta2, Oferta3] est√©n disponibles..."
    
    ### üìß Caracter√≠sticas del Email:
    - **Confirmaci√≥n inmediata:** Notificaci√≥n instant√°nea de registro exitoso
    - **Mensaje contextual:** Personalizado seg√∫n ofertas de inter√©s del usuario
    - **Branding consistente:** Logo y colores corporativos autom√°ticos
    - **Dise√±o responsivo:** Compatible con todos los clientes de correo
    
    ### üé® Personalizaci√≥n Autom√°tica:
    - **Nombre del usuario:** Personalizaci√≥n del saludo (opcional)
    - **Logo corporativo:** Configurado autom√°ticamente desde variables de entorno
    - **Bot√≥n de acci√≥n:** Enlace opcional al sitio web principal
    - **Informaci√≥n de contacto:** Email de soporte para consultas
    - **Mensaje de disponibilidad:** Generado seg√∫n ofertas especificadas
    
    ### ‚ö° Casos de Uso por Tipo de Ofertas:
    - **Plataforma general:** `offerings: []` - Para registro general sin ofertas espec√≠ficas
    - **Producto espec√≠fico:** `offerings: ["CRM Avanzado"]` - Para una soluci√≥n particular
    - **Suite de productos:** `offerings: ["CRM", "Analytics", "Inventarios"]` - Para m√∫ltiples soluciones
    - **Beta testing:** `offerings: ["Beta Program"]` - Para programas de prueba
    
    ### üîß Configuraci√≥n Autom√°tica:
    - `app_name`: Nombre de la aplicaci√≥n desde variables de entorno
    - `company_name`: Nombre de la empresa para footer
    - `logo_url`: URL del logo corporativo
    - `support_email`: Email de contacto para soporte
    - `website_url`: URL por defecto si no se especifica
    
    Args:
        request (WaitlistEmailRequest): **Datos del usuario** con email obligatorio,
                                      ofertas de inter√©s y personalizaci√≥n opcional.
    
    Returns:
        WaitlistEmailResponse: **Confirmaci√≥n detallada** del env√≠o con metadatos
                              completos, tipo de mensaje y texto de ofertas generado.
    
    Example:
        ```json
        // M√∫ltiples ofertas
        {
            "email": "usuario@empresa.com",
            "user_name": "Mar√≠a Gonz√°lez",
            "website_url": "https://miapp.com",
            "offerings": ["CRM Avanzado", "Sistema de Inventarios", "Analytics Pro"]
        }
        
        // Una sola oferta
        {
            "email": "juan@startup.com",
            "user_name": "Juan P√©rez",
            "offerings": ["CRM Avanzado"]
        }
        
        // Sin ofertas espec√≠ficas
        {
            "email": "ana@empresa.com",
            "offerings": []
        }
        ```
    
    Note:
        - Si `offerings` est√° vac√≠o, se usa mensaje gen√©rico de plataforma
        - Si tiene 1 elemento, se personaliza para esa oferta espec√≠fica
        - Si tiene m√∫ltiples elementos, se listan todas separadas por comas
        - M√°ximo 10 ofertas permitidas, cada una con m√°ximo 100 caracteres
        - El tipo de mensaje se incluye en la respuesta para debugging
        - Todos los elementos de branding se toman autom√°ticamente de variables de entorno
    """
    
    try:
        # Enviar email de confirmaci√≥n de waitlist
        response = controller.send_waitlist_email(request)
        
        # Si el env√≠o fall√≥, lanzar HTTPException
        if not response.success:
            raise HTTPException(
                status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
                detail=response.message
            )
        
        return response
        
    except HTTPException:
        # Re-lanzar HTTPExceptions tal como est√°n
        raise
    except Exception as e:
        # Capturar cualquier otro error inesperado
        print(f"[ERROR] Error inesperado en endpoint send_confirmation: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Error interno del servidor: {str(e)}"
        )