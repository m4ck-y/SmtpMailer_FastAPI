from fastapi import APIRouter, HTTPException, status
from app.otp.controller import EmailOTPApplication
from app.otp.models import OTPEmailRequest, OTPEmailResponse

controller = EmailOTPApplication()

MODULE_NAME = "email"

router_otp = APIRouter(
    prefix=f"/{MODULE_NAME}",
    tags=[MODULE_NAME])

TAG_OTP = {
    "name": MODULE_NAME,
    "description": """
- üîê **C√≥digos OTP** - Env√≠o de c√≥digos de verificaci√≥n seguros
- üéØ **Funcionalidades:** Generaci√≥n y env√≠o de c√≥digos temporales para 2FA
- üöÄ **Casos de uso:** Registro, login seguro, recuperaci√≥n de cuenta  
- üìß **Caracter√≠sticas:** HTML responsivo, rate limiting, validaci√≥n RFC
- ‚ö° **Seguridad:** C√≥digos aleatorios, expiraci√≥n configurable, logging completo
"""
}

@router_otp.post("/send_otp", response_model=OTPEmailResponse)
def enviar_codigo_otp(request: OTPEmailRequest) -> OTPEmailResponse:
    """
    Env√≠a un c√≥digo de verificaci√≥n OTP (One-Time Password) por correo electr√≥nico con configuraci√≥n avanzada.
    
    Genera y env√≠a un email con c√≥digo de verificaci√≥n temporal utilizando plantilla HTML responsiva
    con personalizaci√≥n completa: tiempo de expiraci√≥n configurable, verificaci√≥n autom√°tica opcional
    y logo personalizable. Optimizado para m√∫ltiples clientes de correo y casos de uso empresariales.
    
    ### üîê Caracter√≠sticas de Seguridad:
    - C√≥digo OTP con validaci√≥n de formato (4-8 caracteres alfanum√©ricos)
    - Tiempo de expiraci√≥n configurable (0-1440 minutos)
    - Validaci√≥n RFC-compliant de direcciones de email
    - Headers de seguridad y logging completo de operaciones
    
    ### üìß Personalizaci√≥n Autom√°tica:
    - **Logo y branding:** Configurados autom√°ticamente desde variables de entorno
    - **Redirecci√≥n autom√°tica:** Bot√≥n opcional con URL de redirecci√≥n
    - **Tiempo de expiraci√≥n:** Configurable o sin mostrar si es 0/None
    - **Consistencia:** Branding uniforme en todos los emails
    
    ### ‚ö° Casos de Uso:
    - Autenticaci√≥n de dos factores (2FA)
    - Verificaci√≥n de registro de usuarios
    - Recuperaci√≥n de contrase√±as
    - Confirmaci√≥n de transacciones cr√≠ticas
    
    Args:
        request (OTPEmailRequest): **Configuraci√≥n completa del email OTP** con todos los par√°metros
                                  de personalizaci√≥n y comportamiento.
    
    Returns:
        OTPEmailResponse: **Respuesta detallada** con estado del env√≠o, metadatos de configuraci√≥n
                         aplicada y informaci√≥n para debugging.
    
    Example:
        ```json
        {
            "email": "usuario@hospital.com",
            "code": "A1B2C3",
            "expiry_minutes": 15,
            "redirect_url": "https://app.hospital.com/dashboard?verified=true"
        }
        ```
    
    Note:
        - Si `expiry_minutes` es 0 o None, no se muestra mensaje de expiraci√≥n
        - Si `redirect_url` es None o vac√≠a, no se muestra bot√≥n de redirecci√≥n
        - `app_name` y `logo_url` se toman autom√°ticamente de las variables de entorno
        - Esto garantiza consistencia en el branding y simplifica la integraci√≥n
        - Las URLs se validan autom√°ticamente (deben comenzar con http/https)
    """
    
    try:
        # Enviar email OTP con configuraci√≥n avanzada
        response = controller.send_otp_email(request)
        
        # Si el env√≠o fall√≥, lanzar HTTPException
        if not response.success:
            raise HTTPException(
                status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
                detail=response.message
            )
        
        return response
        
    except HTTPException:
        # Re-lanzar HTTPExceptions tal como est√°n
        raise
    except Exception as e:
        # Capturar cualquier otro error inesperado
        print(f"[ERROR] Error inesperado en endpoint send_otp: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Error interno del servidor: {str(e)}"
        )


@router_otp.post("/send_otp_legacy")
def enviar_codigo_otp_legacy(email: str, code: str, app_name: str):
    """
    Endpoint legacy para env√≠o de OTP con par√°metros simples.
    
    DEPRECATED: Este endpoint se mantiene para compatibilidad hacia atr√°s.
    Se recomienda usar `/send_otp` con el modelo OTPEmailRequest completo.
    
    Args:
        email (str): Direcci√≥n de correo electr√≥nico del destinatario.
        code (str): C√≥digo OTP alfanum√©rico (4-8 caracteres).
        app_name (str): Nombre de la aplicaci√≥n.
    
    Returns:
        dict: Respuesta b√°sica de √©xito o error.
    """
    try:
        # Crear request b√°sico para compatibilidad (app_name ya no se usa)
        request = OTPEmailRequest(
            email=email,
            code=code
        )
        
        # Usar el controlador nuevo
        response = controller.send_otp_email(request)
        
        if not response.success:
            raise HTTPException(
                status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
                detail=response.message
            )
        
        # Retornar formato simplificado para compatibilidad
        return {
            "success": True,
            "message": "C√≥digo OTP enviado exitosamente",
            "email_sent_to": email
        }
        
    except HTTPException:
        raise
    except Exception as e:
        print(f"[ERROR] Error en endpoint legacy: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=str(e)
        )